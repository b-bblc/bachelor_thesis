<rst>
	<header>
		<relations>
			<rel name="antithesis" type="rst" />
			<rel name="attribution" type="rst" />
			<rel name="background" type="rst" />
			<rel name="cause" type="rst" />
			<rel name="comparison" type="multinuc" />
			<rel name="concession" type="rst" />
			<rel name="conclusion" type="rst" />
			<rel name="condition" type="rst" />
			<rel name="contrast" type="multinuc" />
			<rel name="effect" type="rst" />
			<rel name="elaboration" type="rst" />
			<rel name="evaluation" type="rst" />
			<rel name="evidence" type="rst" />
			<rel name="joint" type="multinuc" />
			<rel name="motivation" type="rst" />
			<rel name="preparation" type="rst" />
			<rel name="purpose" type="rst" />
			<rel name="restatement" type="multinuc" />
			<rel name="same-unit" type="multinuc" />
			<rel name="sequence" type="multinuc" />
			<rel name="solutionhood" type="rst" />
		</relations>
	</header>
	<body>
		<segment id="1" relname="antithesis">УДК 004.056</segment>
		<segment id="2" parent="168" relname="span">АЛГОРИТМ КОНТРОЛЯ ЦЕЛОСТНОСТИ ДЕПЕРСОНАЛИЗИРОВАННЫХ ДАННЫХ В ИНФОРМАЦИОННЫХ СИСТЕМАХ ПЕРСОНАЛЬНЫХ ДАННЫХ</segment>
		<segment id="3" parent="2" relname="attribution">Ю.А. Гатчин, О.А. Теплоухова, А. С. Куракин</segment>
		<segment id="4" relname="antithesis">Рассматривается проблема обеспечения целостности информации, обрабатываемой в информационных системах персональных данных, при использовании алгоритма деперсонализации данных. Предлагается использовать алгоритм контроля целостности, основанный на использовании хэш-функции, для подтверждения неизменности деперсонализированных данных, хранящихся в информационных системах персональных данных. Ключевые слова: контроль целостности, хэш-функция, алгоритм деперсонализации, персональные данные, информационные системы персональных данных.</segment>
		<segment id="5" parent="184" relname="preparation">Введение</segment>
		<segment id="6" parent="303" relname="background">На сегодняшний день обеспечение безопасности персональных данных (ПДн) является одной из острейших проблем в информационной сфере и взаимоотношениях государства, юридических и физических лиц.</segment>
		<segment id="7" parent="170" relname="span">Выполнение требований к защищенности ПДн при их обработке в информационных системах,</segment>
		<segment id="8" parent="7" relname="attribution">устанавливаемых федеральным законом «О персональных данных» [1],</segment>
		<segment id="9" parent="171" relname="same-unit">является очень дорогостоящей задачей.</segment>
		<segment id="10" parent="11" relname="antithesis">Для снижения данных требований [2] к уровню защищенности информационных систем персональных данных (ИСПДн),</segment>
		<segment id="11" parent="308" relname="span">как правило, применяют способы обезличивания,</segment>
		<segment id="12" parent="307" relname="joint">позволяющие существенно сократить расходы на обеспечение их информационной безопасности</segment>
		<segment id="13" parent="307" relname="joint">и снизить вероятность угроз несанкционированного доступа соответственно.</segment>
		<segment id="14" parent="291" relname="span">Перспективным способом обезличивания персональных данных является алгоритм деперсонализации [3],</segment>
		<segment id="15" parent="14" relname="purpose">применение которого делает невозможным определить принадлежность ПДн их владельцу.</segment>
		<segment id="16" parent="292" relname="span">Необходимо отметить, что даже после применения алгоритма деперсонализации ПДн остается актуальной угроза нарушения целостности данных, хранящихся в ИСПДн,</segment>
		<segment id="17" parent="16" relname="purpose">направленная на изменение или искажение информации, приводящее к нарушению ее качества.</segment>
		<segment id="18" parent="19" relname="purpose">Таким образом, для того чтобы оператор ИСПДн был уверен в том, что загружаемые им данные не были искажены,</segment>
		<segment id="19" parent="293" relname="span">необходима реализация механизма контроля целостности (КЦ) деперсонализированных данных.</segment>
		<segment id="20" parent="310" relname="span">Существующие аппаратно-программные комплексы, включающие в свой функционал КЦ данных, являются достаточно дорогостоящим решением,</segment>
		<segment id="21" parent="20" relname="purpose">которое не могут позволить бюджеты небольших организаций.</segment>
		<segment id="22" parent="178" relname="span">Эффективным способом нейтрализации угрозы нарушения целостности ПДн является предлагаемый в настоящей работе механизм,</segment>
		<segment id="23" parent="22" relname="elaboration">основанный на использовании хэш-функций в процессе деперсонализации данных,</segment>
		<segment id="24" parent="178" relname="purpose">позволяющий оператору отслеживать нарушение целостности деперсонализированных данных.</segment>
		<segment id="25" parent="181" relname="joint">Этот не применявшийся ранее подход не требует больших финансовых затрат</segment>
		<segment id="26" parent="27" relname="condition">и при совместном использовании с алгоритмом деперсонализации</segment>
		<segment id="27" parent="334" relname="span">позволяет эффективно повысить уровень защищенности ИСПДн от НСД.</segment>
		<segment id="28" parent="297" relname="span">Целью данной работы является</segment>
		<segment id="29" parent="335" relname="span">разработка алгоритма КЦ данных, который при совместном использовании с алгоритмом деперсонализации данных в ИСПДн обеспечивал бы обнаружение нарушения целостности хранящейся в постоянном запоминающем устройстве (ПЗУ) информации</segment>
		<segment id="30" parent="29" relname="condition">при ее загрузке в оперативном запоминающем устройстве (ОЗУ).</segment>
		<segment id="31" parent="205" relname="preparation">Описание алгоритма</segment>
		<segment id="32" parent="306" relname="preparation">Перспективным способом решения данной проблемы является использование алгоритма контроля целостности деперсонализированных данных.</segment>
		<segment id="33" parent="186" relname="joint">Предлагаемый алгоритм основан на вычислении хэш-значения от открытых данных при сохранении информации в ПЗУ до применения алгоритма деперсонализации и после применения обратного алгоритма при загрузке данных в ОЗУ.</segment>
		<segment id="34" parent="186" relname="joint">На основании сравнения полученных хэш-значений делается вывод о целостности загружаемой информации.</segment>
		<segment id="35" parent="329" relname="span">Рассмотрим таблицу Д, содержащую персональные данные субъектов, обрабатываемых в ИСПДн.</segment>
		<segment id="36" parent="187" relname="restatement">Во время работы оператора таблица Д хранится в ОЗУ в персонализированном виде,</segment>
		<segment id="37" parent="187" relname="restatement">т.е. представляет собой открытую информацию (ОИ).</segment>
		<segment id="38" parent="188" relname="sequence">До того, как будет применен алгоритм деперсонализации при сохранении данных в ПЗУ,</segment>
		<segment id="39" parent="188" relname="sequence">вычислим хэш-значение от ОИ: й(Д).</segment>
		<segment id="40" parent="41" relname="cause">После этого применим алгоритм деперсонализации данных,</segment>
		<segment id="41" parent="189" relname="span">в результате чего будет получена таблица Дпредставляющая собой файл с закрытой информацией (ЗИ).</segment>
		<segment id="42" parent="190" relname="span">Добавим вычисленное ранее хэш-значение Ь(Д) к полученному файлу,</segment>
		<segment id="43" parent="42" relname="condition">применив операцию конкатенации,</segment>
		<segment id="44" parent="188" relname="sequence">и получим значение ,Р(Д ,й(Д)), которое сохраняется в ПЗУ.</segment>
		<segment id="45" parent="46" relname="purpose">Для того чтобы загрузить персональные данные в ОЗУ</segment>
		<segment id="46" parent="298" relname="span">необходимо извлечь из хранящегося в ПЗУ файла ,F(D,h(D)) хэш-значение h(D),</segment>
		<segment id="47" parent="192" relname="sequence">после чего применяем к таблице D' обратный алгоритм деперсонализации,</segment>
		<segment id="48" parent="192" relname="sequence">в результате чего получаем таблицу D'.</segment>
		<segment id="49" parent="192" relname="sequence">Вычислим новое хэш-значение от полученной таблицы: h(D)</segment>
		<segment id="50" parent="330" relname="span">и сравним со значением, которое было извлечено из хранящегося в ПЗУ файла.</segment>
		<segment id="51" parent="52" relname="condition">В случае если h(D) совпадает с h(D''),</segment>
		<segment id="52" parent="193" relname="span">принимаем что таблица D' совпадает с исходной таблицей ПДн D, и загружаем ее в ОЗУ для дальнейшей работы.</segment>
		<segment id="53" parent="55" relname="condition">В противном случае, если полученное хэш-значение h(D) не совпало</segment>
		<segment id="54" relname="antithesis">АЛГОРИТМ КОНТРОЛЯ ЦЕЛОСТНОСТИ ДЕПЕРСОНАЛИЗИРОВАННЫХ .</segment>
		<segment id="55" parent="194" relname="span">с h(D ), алгоритм должен выдать сообщение оператору о том, что была нарушена целостность файла с деперсонализированными данными.</segment>
		<segment id="56" parent="200" relname="joint">Хэш-значение от таблицы ПДн D должно вычисляться после каждого применения к ней обратного алгоритма деперсонализации.</segment>
		<segment id="57" parent="58" relname="condition">При очередном сохранении данных в ПЗУ</segment>
		<segment id="58" parent="311" relname="span">должен формироваться файл с ЗИ в результате конкатенации таблицы D и нового хэш-значения h'(D ).</segment>
		<segment id="59" parent="60" relname="condition">При получении сообщения о нарушении КЦ</segment>
		<segment id="60" parent="312" relname="span">оператор может принять решение о повторной проверке целостности деперсонализированных данных.</segment>
		<segment id="61" parent="62" relname="condition">Если вновь вычисленное хэш-значение от таблицы D не будет совпадать с извлеченным значением h(D ),</segment>
		<segment id="62" parent="198" relname="span">оператор должен сообщить об этом администратору информационной безопасности.</segment>
		<segment id="63" parent="199" relname="sequence">После чего в ОЗУ загружается резервная копия деперсонализированной таблицы .</segment>
		<segment id="64" parent="268" relname="preparation">Практическая реализация алгоритма</segment>
		<segment id="65" parent="211" relname="span">Использование в предлагаемом алгоритме КЦ хэш-функции обусловлено следующими ее преимуществами:</segment>
		<segment id="66" parent="327" relname="same-unit">1\. размер входного файла</segment>
		<segment id="67" parent="68" relname="condition">при вычислении хэш-функции</segment>
		<segment id="68" parent="328" relname="span">может быть произвольным в отличие от шифрования данных;</segment>
		<segment id="69" parent="70" relname="condition">2\. при вычислении хэш-функции</segment>
		<segment id="70" parent="313" relname="span">не требуется ключ,</segment>
		<segment id="71" parent="207" relname="joint">который необходимо хранить</segment>
		<segment id="72" parent="207" relname="joint">и вводить,</segment>
		<segment id="73" parent="209" relname="span">что делает реализацию алгоритма очень простой.</segment>
		<segment id="74" parent="213" relname="span">Используемая функция</segment>
		<segment id="75" parent="212" relname="span">[формула]</segment>
		<segment id="76" parent="75" relname="elaboration">где М [символ]{0,1}[символ] — произвольное цифровое сообщение,</segment>
		<segment id="77" parent="214" relname="same-unit">должна быть односторонней хэш-функцией,</segment>
		<segment id="78" parent="219" relname="span">что означает выполнение следующих условий [4]:</segment>
		<segment id="79" parent="216" relname="joint">1\. значение функции h определено для любого цифрового сообщения М [символ]{0,1}[символ];</segment>
		<segment id="80" parent="216" relname="joint">2\. для любого цифрового сообщения М [символ]{0,1}[символ] функция h имеет фиксированный порядок n [символ] для любого ;</segment>
		<segment id="81" parent="216" relname="joint">3\. для любого М [символ]{0,1}[символ] значение h(M) вычисляется за полиномиальное время;</segment>
		<segment id="82" parent="217" relname="span">4\. для любого М1 [символ]{0,1}[символ] вычислительно сложно найти сообщение М2 [символ] {0,1}[символ],</segment>
		<segment id="83" parent="82" relname="condition">такое, что М1[символ]М2 , h(M1 ) = h( М 2 );</segment>
		<segment id="84" parent="218" relname="span">5\. вычислительно невозможно (за разумное время) найти пару (М1,М2 ), М1[символ]М2 , М[символ] {0,1}[символ], i = 1,2, такую,</segment>
		<segment id="85" parent="84" relname="condition">что h(М1) = h(М2).</segment>
		<segment id="86" parent="222" relname="span">Свойства 4, 5 являются важнейшими криптографическими свойствами,</segment>
		<segment id="87" parent="86" relname="cause">обеспечивающими стойкость однонаправленных хэш-функций.</segment>
		<segment id="88" parent="223" relname="span">В случае если злоумышленнику известен алгоритм построения хэш-функции,</segment>
		<segment id="89" parent="88" relname="elaboration">первоначальное сообщение М [символ]{0,1}[символ] и хэш-значение [символ]М),</segment>
		<segment id="90" parent="224" relname="span">то вероятность Р(k,n) того, что среди сообщений N1, ...,Nk [символ] {0,1}[символ] существует номер i = 1,..,к [символ] N ,</segment>
		<segment id="91" parent="226" relname="span">такой что h(М) = h(Ni) равна:</segment>
		<segment id="92" parent="91" relname="elaboration">[формула].</segment>
		<segment id="93" parent="336" relname="same-unit">Таким образом,</segment>
		<segment id="94" parent="95" relname="purpose">для осуществления взлома фиксированного значения для 128-битных хэш-значений (например, MD4 (Message Digest 4), MD5(Message Digest 5))</segment>
		<segment id="95" parent="337" relname="span">потребуется перебрать около 2 1 2 0 текстов,</segment>
		<segment id="96" parent="228" relname="span">что за обозримое время не представляется возможным.</segment>
		<segment id="97" parent="282" relname="span">Необходимо отметить, что кроме метода прямого перебора существуют более эффективные атаки на хэш-функции.</segment>
		<segment id="98" parent="232" relname="span">Так, например, взлом за линейное время (туннельный эффект) [5] основывается на том,</segment>
		<segment id="99" parent="231" relname="span">что большинство хэш-функций используют сдвиговую функцию:</segment>
		<segment id="100" parent="230" relname="sequence">текст разбивается на блоки ,</segment>
		<segment id="101" parent="230" relname="sequence">затем происходит итерационный процесс подсчета хэш-значения [формула].</segment>
		<segment id="102" parent="234" relname="cause">В силу небольшой длины раунда можно применить дифференциальный анализ</segment>
		<segment id="103" parent="234" relname="span">и найти такой текст AD,</segment>
		<segment id="104" parent="103" relname="condition">что [формула].</segment>
		<segment id="105" parent="284" relname="condition">Ввиду вышесказанного, в предлагаемом алгоритме КЦ рекомендуется использовать одностороннюю хэш-функцию в совокупности с методом повышения ее криптостойкости, например, метод перестановок.</segment>
		<segment id="106" parent="284" relname="span">В этом случае хэш-функция будет строиться по правилу:</segment>
		<segment id="107" parent="240" relname="span">[формула].</segment>
		<segment id="108" parent="244" relname="span">В данном случае [символ];, i = 1,..., k , - произвольные перестановки текста М.</segment>
		<segment id="109" parent="108" relname="elaboration">Полученное хэш-значение будет хэш-функцией как конкатенация хэш-значений однонаправленной хэш-функции.</segment>
		<segment id="110" parent="238" relname="span">Данный метод эффективен против туннельного эффекта,</segment>
		<segment id="111" parent="110" relname="cause">поскольку после перестановки полученный текст отличается от исходного не на туннельный эффект AD,</segment>
		<segment id="112" parent="241" relname="span">что приводит к отличию хэш-значений данных текстов.</segment>
		<segment id="113" parent="300" relname="span">Кроме того, данный метод может быть эффективно распараллелен,</segment>
		<segment id="114" parent="113" relname="purpose">что является важным преимуществом для использования его на маломощных компьютерах.</segment>
		<segment id="115" parent="116" relname="purpose">Для получения хэш-значения таблицы D</segment>
		<segment id="116" parent="338" relname="span">рекомендуется использовать MD5 - 128-битный алгоритм хеширования,</segment>
		<segment id="117" parent="338" relname="purpose">предназначенный для вычисления хэш-функций от сообщений произвольной длины.</segment>
		<segment id="118" parent="339" relname="evaluation">Данный алгоритм является улучшенной в плане безопасности версией MD4.</segment>
		<segment id="119" parent="249" relname="span">На вход алгоритма MD5 поступает входной поток данных, хэш которого необходимо найти.</segment>
		<segment id="120" parent="119" relname="elaboration">Длина сообщения может быть любой (в том числе нулевой).</segment>
		<segment id="121" parent="248" relname="span">Запишем длину сообщения в L.</segment>
		<segment id="122" parent="247" relname="joint">Это число целое и неотрицательное.</segment>
		<segment id="123" parent="247" relname="joint">Кратность каким-либо числам необязательна.</segment>
		<segment id="124" parent="257" relname="span">После поступления данных идет процесс подготовки потока к вычислениям.</segment>
		<segment id="125" parent="251" relname="sequence">Сначала дописывают единичный бит в конец потока (байт 0x80),</segment>
		<segment id="126" parent="251" relname="sequence">затем необходимое число нулевых бит.</segment>
		<segment id="127" parent="252" relname="span">Входные данные выравниваются так,</segment>
		<segment id="128" parent="253" relname="span">чтобы их новый размер Ь ' удовлетворял условию:</segment>
		<segment id="129" parent="128" relname="elaboration">[формула].</segment>
		<segment id="130" parent="254" relname="joint">Далее выравненные данные разбиваются на блоки (слова) по 32 бита,</segment>
		<segment id="131" parent="263" relname="span">и каждый блок проходит 4 раунда из 16 операторов.</segment>
		<segment id="132" parent="256" relname="span">Для 4 раундов используются следующие функции от трех аргументов:</segment>
		<segment id="133" parent="255" relname="joint">1 раунд: [формула];</segment>
		<segment id="134" parent="255" relname="joint">2 раунд: = [формула];</segment>
		<segment id="135" parent="255" relname="joint">3 раунд: = [формула];</segment>
		<segment id="136" parent="255" relname="joint">4 раунд: = [формула].</segment>
		<segment id="137" parent="258" relname="joint">Так как множество аргументов хэш-функции счетно,</segment>
		<segment id="138" parent="258" relname="joint">а значения имеют определенный порядок,</segment>
		<segment id="139" parent="259" relname="span">неизбежно возникновение коллизии - получение одного и того же хэша для двух разных входных значений.</segment>
		<segment id="140" parent="141" relname="condition">При использовании в данном случае одного из самых универсальных методов поиска коллизий -атаки «дней рождений»,</segment>
		<segment id="141" parent="315" relname="span">отыскание коллизии для хэш-функции разрядности п потребует в среднем около [символ] операций,</segment>
		<segment id="142" parent="315" relname="elaboration">что для функции МЭ5 составляет 264.</segment>
		<segment id="143" parent="317" relname="span">Такая вычислительная сложность нахождения коллизий</segment>
		<segment id="144" parent="318" relname="span">позволяет гарантировать очень низкую вероятность подмены таблиц с ПДн злоумышленником,</segment>
		<segment id="145" parent="144" relname="condition">которая не была бы обнаружена алгоритмом контроля целостности.</segment>
		<segment id="146" parent="147" relname="condition">При практической реализации алгоритма</segment>
		<segment id="147" parent="320" relname="span">также целесообразно хранить отдельно резервные копии деперсонализированных данных.</segment>
		<segment id="148" parent="319" relname="span">Применение таких мер позволит избежать потери ПДн, обрабатываемых в ИСПДн,</segment>
		<segment id="149" parent="264" relname="joint">в случае, если злоумышленник получит доступ к ЗИ, хранящейся в ПЗУ,</segment>
		<segment id="150" parent="264" relname="joint">и целостность данных будет нарушена.</segment>
		<segment id="151" parent="286" relname="preparation">Заключение</segment>
		<segment id="152" parent="286" relname="span">Предложенный алгоритм является наиболее перспективным и оптимальным решением задач по контролю целостности персональных данных, хранящихся и обрабатываемых в информационных системах персональных данных.</segment>
		<segment id="153" parent="275" relname="span">Данный алгоритм обладает следующими преимуществами:</segment>
		<segment id="154" parent="270" relname="joint">1\. размер файла с персональными данными, поступающего на вход алгоритма, может быть произвольным;</segment>
		<segment id="155" parent="156" relname="purpose">2\. для вычисления используемой в алгоритме хэш-функции</segment>
		<segment id="156" parent="322" relname="span">не требуется ключ,</segment>
		<segment id="157" parent="271" relname="joint">который необходимо хранить</segment>
		<segment id="158" parent="271" relname="joint">и вводить,</segment>
		<segment id="159" parent="323" relname="purpose">что значительно упрощает программную реализацию;</segment>
		<segment id="160" parent="161" relname="purpose">3\. для применения данного решения</segment>
		<segment id="161" parent="324" relname="span">не требуется дополнительных аппаратных средств,</segment>
		<segment id="162" parent="324" relname="antithesis">используемый алгоритм вычисления хэш-функции МЭ5 входит в состав открытых библиотек криптопримитивов, таких как Ореп881, Crypt.dll;</segment>
		<segment id="163" parent="270" relname="joint">4\. алгоритм может быть реализован в качестве программной надстройки над алгоритмом деперсонализации персональных данных.</segment>
		<segment id="164" parent="165" relname="preparation">Литература</segment>
		<segment id="165" relname="antithesis">1\. Федеральный закон Российской Федерации от 27 июля 2006 г. № 152-ФЗ. О персональных данных. Принят Государственной Думой Федерального Собрания Российской Федерации 8 июля 2006 г.: одобрен Советом Федерации Федерального Собрания Российской Федерации 14 июля 2006 г. // Российская газета. - 2006. - 29 июля. 2\. Об утверждении Положения об обеспечении безопасности персональных данных при их обработке в информационных системах персональных данных: Постановление Правительства Российской Федерации от 17 ноября 2007 г. № 781 г. Москва // Российская газета. - 2007. - 21 ноября. 3\. Куракин А.С. Алгоритм деперсонализации персональных данных // Научно- технический вестник информационных технологий, механики и оптики. - 2012. - № 6 (82). - С. 130-135. 4\. Девянин П.Н., Михальский О.О., Правиков Д.И. Теоретические основы компьютерной безопасности: Учебное пособие для вузов. - М.: Радио и связь, 2000. - 192 с. 5\. Лёвин В.Ю. О повышении криптостойкости однонаправленных хеш-функций // Фундаментальная и прикладная математика. - 2009. - Т. 15. - № 5. - С. 171-179.</segment>
		<segment id="166" relname="antithesis">Гатчин Юрий Арменакович - Санкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, доктор технических наук, профессор, зав. кафедрой, gatchin@mai1.ifmo.ru Теплоухова Ольга Александровна - Санкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, аспирант, tep1ouhovaoa@gmai1. сот Куракин Александр Сергеевич - Санкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, аспирант, nirt@mai1.ru</segment>
		<group id="168" type="span" parent="185" relname="preparation"/>
		<group id="170" type="span" parent="171" relname="same-unit"/>
		<group id="171" type="multinuc" parent="174" relname="joint"/>
		<group id="174" type="multinuc" parent="303" relname="span"/>
		<group id="178" type="span" parent="295" relname="span"/>
		<group id="181" type="multinuc" parent="304" relname="elaboration"/>
		<group id="183" type="multinuc" parent="184" relname="span"/>
		<group id="184" type="span" parent="185" relname="span"/>
		<group id="185" type="span" relname="antithesis"/>
		<group id="186" type="multinuc" parent="306" relname="span"/>
		<group id="187" type="multinuc" parent="35" relname="elaboration"/>
		<group id="188" type="multinuc" parent="202" relname="span"/>
		<group id="189" type="span" parent="188" relname="sequence"/>
		<group id="190" type="span" parent="188" relname="sequence"/>
		<group id="192" type="multinuc" parent="204" relname="joint"/>
		<group id="193" type="span" parent="195" relname="comparison"/>
		<group id="194" type="span" parent="195" relname="comparison"/>
		<group id="195" type="multinuc" parent="196" relname="span"/>
		<group id="196" type="span" parent="50" relname="elaboration"/>
		<group id="198" type="span" parent="199" relname="sequence"/>
		<group id="199" type="multinuc" parent="312" relname="elaboration"/>
		<group id="200" type="multinuc" parent="204" relname="joint"/>
		<group id="202" type="span" parent="203" relname="span"/>
		<group id="203" type="span" parent="204" relname="joint"/>
		<group id="204" type="multinuc" parent="205" relname="span"/>
		<group id="205" type="span" parent="206" relname="span"/>
		<group id="206" type="span" relname="antithesis"/>
		<group id="207" type="multinuc" parent="313" relname="elaboration"/>
		<group id="209" type="span" parent="210" relname="joint"/>
		<group id="210" type="multinuc" parent="65" relname="elaboration"/>
		<group id="211" type="span" parent="267" relname="joint"/>
		<group id="212" type="span" parent="74" relname="elaboration"/>
		<group id="213" type="span" parent="214" relname="same-unit"/>
		<group id="214" type="multinuc" parent="220" relname="span"/>
		<group id="216" type="multinuc" parent="78" relname="elaboration"/>
		<group id="217" type="span" parent="216" relname="joint"/>
		<group id="218" type="span" parent="216" relname="joint"/>
		<group id="219" type="span" parent="220" relname="condition"/>
		<group id="220" type="span" parent="221" relname="span"/>
		<group id="221" type="span" parent="267" relname="joint"/>
		<group id="222" type="span" parent="227" relname="joint"/>
		<group id="223" type="span" parent="224" relname="condition"/>
		<group id="224" type="span" parent="225" relname="span"/>
		<group id="225" type="span" parent="227" relname="joint"/>
		<group id="226" type="span" parent="90" relname="condition"/>
		<group id="227" type="multinuc" parent="228" relname="evidence"/>
		<group id="228" type="span" parent="229" relname="span"/>
		<group id="229" type="span" parent="267" relname="joint"/>
		<group id="230" type="multinuc" parent="99" relname="elaboration"/>
		<group id="231" type="span" parent="98" relname="elaboration"/>
		<group id="232" type="span" parent="332" relname="span"/>
		<group id="234" type="span" parent="283" relname="span"/>
		<group id="238" type="span" parent="112" relname="cause"/>
		<group id="240" type="span" parent="106" relname="elaboration"/>
		<group id="241" type="span" parent="243" relname="joint"/>
		<group id="243" type="multinuc" parent="267" relname="joint"/>
		<group id="244" type="span" parent="107" relname="elaboration"/>
		<group id="247" type="multinuc" parent="121" relname="elaboration"/>
		<group id="248" type="span" parent="250" relname="sequence"/>
		<group id="249" type="span" parent="250" relname="sequence"/>
		<group id="250" type="multinuc" parent="267" relname="joint"/>
		<group id="251" type="multinuc" parent="124" relname="elaboration"/>
		<group id="252" type="span" parent="251" relname="sequence"/>
		<group id="253" type="span" parent="127" relname="purpose"/>
		<group id="254" type="multinuc" parent="251" relname="sequence"/>
		<group id="255" type="multinuc" parent="132" relname="elaboration"/>
		<group id="256" type="span" parent="131" relname="elaboration"/>
		<group id="257" type="span" parent="250" relname="sequence"/>
		<group id="258" type="multinuc" parent="139" relname="cause"/>
		<group id="259" type="span" parent="262" relname="joint"/>
		<group id="262" type="multinuc" parent="267" relname="joint"/>
		<group id="263" type="span" parent="254" relname="joint"/>
		<group id="264" type="multinuc" parent="148" relname="condition"/>
		<group id="267" type="multinuc" parent="268" relname="span"/>
		<group id="268" type="span" parent="269" relname="span"/>
		<group id="269" type="span" relname="antithesis"/>
		<group id="270" type="multinuc" parent="153" relname="elaboration"/>
		<group id="271" type="multinuc" parent="322" relname="elaboration"/>
		<group id="275" type="span" parent="152" relname="cause"/>
		<group id="282" type="span" parent="267" relname="joint"/>
		<group id="283" type="span" parent="232" relname="elaboration"/>
		<group id="284" type="span" parent="285" relname="span"/>
		<group id="285" type="span" parent="267" relname="joint"/>
		<group id="286" type="span" parent="287" relname="span"/>
		<group id="287" type="span" relname="antithesis"/>
		<group id="291" type="span" parent="174" relname="joint"/>
		<group id="292" type="span" parent="293" relname="evidence"/>
		<group id="293" type="span" parent="294" relname="span"/>
		<group id="294" type="span" parent="183" relname="joint"/>
		<group id="295" type="span" parent="304" relname="span"/>
		<group id="296" type="span" parent="183" relname="joint"/>
		<group id="297" type="span" parent="183" relname="joint"/>
		<group id="298" type="span" parent="192" relname="sequence"/>
		<group id="300" type="span" parent="243" relname="joint"/>
		<group id="302" type="span" parent="183" relname="joint"/>
		<group id="303" type="span" parent="302" relname="span"/>
		<group id="304" type="span" parent="296" relname="span"/>
		<group id="305" type="span" parent="204" relname="joint"/>
		<group id="306" type="span" parent="305" relname="span"/>
		<group id="307" type="multinuc" parent="308" relname="purpose"/>
		<group id="308" type="span" parent="309" relname="span"/>
		<group id="309" type="span" parent="174" relname="joint"/>
		<group id="310" type="span" parent="295" relname="cause"/>
		<group id="311" type="span" parent="200" relname="joint"/>
		<group id="312" type="span" parent="331" relname="span"/>
		<group id="313" type="span" parent="314" relname="span"/>
		<group id="314" type="span" parent="73" relname="cause"/>
		<group id="315" type="span" parent="316" relname="span"/>
		<group id="316" type="span" parent="262" relname="joint"/>
		<group id="317" type="span" parent="262" relname="joint"/>
		<group id="318" type="span" parent="143" relname="purpose"/>
		<group id="319" type="span" parent="320" relname="purpose"/>
		<group id="320" type="span" parent="321" relname="span"/>
		<group id="321" type="span" parent="262" relname="joint"/>
		<group id="322" type="span" parent="323" relname="span"/>
		<group id="323" type="span" parent="325" relname="span"/>
		<group id="324" type="span" parent="326" relname="span"/>
		<group id="325" type="span" parent="270" relname="joint"/>
		<group id="326" type="span" parent="270" relname="joint"/>
		<group id="327" type="multinuc" parent="210" relname="joint"/>
		<group id="328" type="span" parent="327" relname="same-unit"/>
		<group id="329" type="span" parent="202" relname="preparation"/>
		<group id="330" type="span" parent="192" relname="sequence"/>
		<group id="331" type="span" parent="200" relname="joint"/>
		<group id="332" type="span" parent="97" relname="elaboration"/>
		<group id="334" type="span" parent="181" relname="joint"/>
		<group id="335" type="span" parent="28" relname="purpose"/>
		<group id="336" type="multinuc" parent="96" relname="cause"/>
		<group id="337" type="span" parent="336" relname="same-unit"/>
		<group id="338" type="span" parent="339" relname="span"/>
		<group id="339" type="span" parent="340" relname="span"/>
		<group id="340" type="span" parent="267" relname="joint"/>
  </body>
</rst>